// <auto-generated />
using System;
using CakeManager.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CakeManager.Server.Migrations
{
    [DbContext(typeof(CakeMarkDbContext))]
    partial class CakeMarkDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0-preview3.19153.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CakeManager.Repository.Models.ActiveDirectoryUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<Guid?>("OfficeId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("ActiveDirectoryUser");
                });

            modelBuilder.Entity("CakeManager.Repository.Models.CakeMark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CakeMark");
                });

            modelBuilder.Entity("CakeManager.Repository.Models.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Office");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f0b09b2f-6b1d-4565-94f6-3281009cc314"),
                            Name = "Aberdeen"
                        },
                        new
                        {
                            Id = new Guid("a248d098-f3b5-4da4-a394-09505c56bf9e"),
                            Name = "Glasgow"
                        });
                });

            modelBuilder.Entity("CakeManager.Repository.Models.SuperCakeMark", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("CreatedBy");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SuperCakeMark");
                });

            modelBuilder.Entity("CakeManager.Repository.Models.ActiveDirectoryUser", b =>
                {
                    b.HasOne("CakeManager.Repository.Models.Office", "Office")
                        .WithMany("Users")
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("CakeManager.Repository.Models.CakeMark", b =>
                {
                    b.HasOne("CakeManager.Repository.Models.ActiveDirectoryUser", "User")
                        .WithMany("CakeMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CakeManager.Repository.Models.SuperCakeMark", b =>
                {
                    b.HasOne("CakeManager.Repository.Models.ActiveDirectoryUser", "User")
                        .WithMany("SuperCakeMarks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
